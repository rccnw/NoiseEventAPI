// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoiseEventApi;

#nullable disable

namespace NoiseEventApi.Migrations
{
    [DbContext(typeof(NoiseEventDbContext))]
    partial class NoiseEventDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0-rc.2.22472.11");

            modelBuilder.Entity("NoiseEventApi.NoiseEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UtcTime")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("NoiseEvents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data = "event 1",
                            Latitude = 47.609721999999998,
                            Longitude = -122.333056,
                            Type = "",
                            UtcTime = "11/7/2022 5:57:32 PM"
                        },
                        new
                        {
                            Id = 2,
                            Data = "event 2",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Type = "",
                            UtcTime = "11/7/2022 5:57:32 PM"
                        },
                        new
                        {
                            Id = 3,
                            Data = "event 3",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Type = "",
                            UtcTime = "11/7/2022 5:57:32 PM"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
